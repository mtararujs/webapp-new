# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-frontend:
    name: Build Frontend
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Set up Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '14'

      # - name: Cache Node.js modules
      #   uses: actions/cache@v3
      #   with:
      #     path: frontend/node_modules
      #     key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-

      - name: Install dependencies
        run: cd frontend && npm install

      - name: Build
        run: cd frontend && npm run build
        env:
          CI: true

  build-backend:
    name: Build Backend
    runs-on: self-hosted
    # services:
    #   postgres:
    #     image: postgres:13
    #     env:
    #       POSTGRES_USER: postgres
    #       POSTGRES_PASSWORD: password
    #       POSTGRES_DB: mydatabase
    #     ports:
    #       - 5432:5432
    #     options: >-
    #       --health-cmd pg_isready
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Set up Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '14'

      # - name: Cache Node.js modules
      #   uses: actions/cache@v3
      #   with:
      #     path: backend/node_modules
      #     key: ${{ runner.os }}-node-${{ hashFiles('backend/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-

      # - name: Wait for PostgreSQL to be ready
      #   run: |
      #     until pg_isready --host=localhost --port=5432; do
      #       echo "Waiting for database connection..."
      #       sleep 1
      #     done

      - name: Install dependencies
        run: cd backend && npm install

      - name: Build
        run: cd backend && npm run build

  deploy:
    name: Deploy to Kubernetes
    runs-on: self-hosted
    needs: [build-frontend, build-backend]
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push frontend Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest

      - name: Build and push backend Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest ./backend
          docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest

      # - name: Set up Kubernetes context
      #   run: |
      #     echo "${{ secrets.KUBECONFIG }}" | base64 --decode > ~/.kube/config

      - name: Apply Kubernetes configurations
        run: |
          kubectl apply -f k8s/backend-deployment.yml
          kubectl apply -f k8s/frontend-deployment.yml
          kubectl apply -f k8s/backend-service.yml
          kubectl apply -f k8s/frontend-service.yml

      - name: Rolling update for frontend
        run: kubectl rollout restart deployment/frontend-deployment

      - name: Rolling update for backend
        run: kubectl rollout restart deployment/backend-deployment

  test:
    name: Run Tests
    runs-on: self-hosted
    needs: [deploy]

    steps:
      - name: Wait for Services to be Ready
        run: |
          kubectl rollout status deployment/backend-deployment
          kubectl rollout status deployment/frontend-deployment

      - name: Run Frontend Tests
        run: |
          cd frontend
          npm test

      - name: Run Backend Tests
        run: |
          cd backend
          npm test